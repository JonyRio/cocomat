{
  "ver": "1.0.25",
  "uuid": "f26f0fc9-25db-423e-ae80-0912cf20658a",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nconst mat3 yuv2rgb = mat3(\n  1.0,    1.0,     1.0,\n  0.0,    -0.344,  1.772,\n  1.402,  -0.714,  0.0);\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture0;\nuniform sampler2D texture1;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec3 yuv = vec3(1, 1, 1);\n  yuv.x = texture2D(texture0, v_uv0).r;\n  yuv.y = texture2D(texture1, v_uv0).a - 0.5;\n  yuv.z = texture2D(texture1, v_uv0).r - 0.5;\n  o.rgb = yuv2rgb * yuv;\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nconst mat3 yuv2rgb = mat3(\n  1.0,    1.0,     1.0,\n  0.0,    -0.344,  1.772,\n  1.402,  -0.714,  0.0);\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture0;\nuniform sampler2D texture1;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec3 yuv = vec3(1, 1, 1);\n  yuv.x = texture2D(texture0, v_uv0).r;\n  yuv.y = texture2D(texture1, v_uv0).a - 0.5;\n  yuv.z = texture2D(texture1, v_uv0).r - 0.5;\n  o.rgb = yuv2rgb * yuv;\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}