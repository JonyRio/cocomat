{
  "ver": "1.0.25",
  "uuid": "a947c964-5279-45cc-bb01-b0015292633d",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n    pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  #if USE_COLOR\n      v_color = a_color;\n  #endif\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n#if USE_COLOR\n  varying vec4 v_color;\n#endif\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 outlineColor;\nuniform vec4 shadowColor;\nuniform vec2 shadowOffset;\nuniform float outlineThickness;\nuniform float shadowSmoothing;\nuniform float softness;\nvoid main () {\n  #if USE_COLOR\n    vec4 f_color = v_color;\n  #else\n    vec4 f_color = vec4(1, 1, 1, 1);\n  #endif\n  float clipAlpha = 1.0;\n  float distance = texture2D(texture, v_uv0).a;\n  float smoothDistance = smoothstep(0.5 - softness, 0.5 + softness, distance);\n  #if USE_SHADOW\n    float shadowDistance = texture2D(texture, v_uv0 - shadowOffset).a;\n    float shadowAlpha = smoothstep(0.5 - shadowSmoothing, 0.5 + shadowSmoothing, shadowDistance) * shadowColor.a;\n    vec4 shadow = vec4(shadowColor.rgb, f_color.a * shadowAlpha);\n  #endif\n  vec4 textColor = vec4(1.0, 1.0, 1.0, 1.0);\n  #if USE_OUTLINE\n    vec4 real_outlineColor = vec4(outlineColor.rgb, f_color.a * outlineColor.a);\n    vec4 mix_color = mix(real_outlineColor, f_color, smoothDistance);\n    float alpha = smoothstep(outlineThickness - softness, outlineThickness + softness, distance);\n    textColor = vec4(mix_color.rgb, mix_color.a * alpha * clipAlpha);\n  #else\n    textColor = vec4(f_color.rgb, f_color.a * smoothDistance * clipAlpha);\n  #endif\n  #if USE_SHADOW\n    textColor = mix(shadow, textColor, textColor.a);\n  #endif\n  ALPHA_TEST(textColor);\n  gl_FragColor = textColor;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n    pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  #if USE_COLOR\n      v_color = a_color;\n  #endif\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n#if USE_COLOR\n  in vec4 v_color;\n#endif\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform SdfParams {\n  vec4 outlineColor;\n  vec4 shadowColor;\n  vec2 shadowOffset;\n  float outlineThickness;\n  float shadowSmoothing;\n  float softness;\n};\nvoid main () {\n  #if USE_COLOR\n    vec4 f_color = v_color;\n  #else\n    vec4 f_color = vec4(1, 1, 1, 1);\n  #endif\n  float clipAlpha = 1.0;\n  float distance = texture2D(texture, v_uv0).a;\n  float smoothDistance = smoothstep(0.5 - softness, 0.5 + softness, distance);\n  #if USE_SHADOW\n    float shadowDistance = texture2D(texture, v_uv0 - shadowOffset).a;\n    float shadowAlpha = smoothstep(0.5 - shadowSmoothing, 0.5 + shadowSmoothing, shadowDistance) * shadowColor.a;\n    vec4 shadow = vec4(shadowColor.rgb, f_color.a * shadowAlpha);\n  #endif\n  vec4 textColor = vec4(1.0, 1.0, 1.0, 1.0);\n  #if USE_OUTLINE\n    vec4 real_outlineColor = vec4(outlineColor.rgb, f_color.a * outlineColor.a);\n    vec4 mix_color = mix(real_outlineColor, f_color, smoothDistance);\n    float alpha = smoothstep(outlineThickness - softness, outlineThickness + softness, distance);\n    textColor = vec4(mix_color.rgb, mix_color.a * alpha * clipAlpha);\n  #else\n    textColor = vec4(f_color.rgb, f_color.a * smoothDistance * clipAlpha);\n  #endif\n  #if USE_SHADOW\n    textColor = mix(shadow, textColor, textColor.a);\n  #endif\n  ALPHA_TEST(textColor);\n  gl_FragColor = textColor;\n}"
      }
    }
  ],
  "subMetas": {}
}